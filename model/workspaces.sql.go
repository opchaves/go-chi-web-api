// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workspaces.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (
  name,
  description,
  currency,
  language,
  user_id
) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, description, currency, language, user_id, created_at, updated_at, deleted_at
`

type CreateWorkspaceParams struct {
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	Currency    string    `json:"currency"`
	Language    string    `json:"language"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (*Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace,
		arg.Name,
		arg.Description,
		arg.Currency,
		arg.Language,
		arg.UserID,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.Language,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const createWorkspaceUser = `-- name: CreateWorkspaceUser :one
INSERT INTO workspaces_users (
  user_id,
  workspace_id,
  role
) VALUES ($1, $2, $3) RETURNING workspace_id, user_id, role, created_at, updated_at
`

type CreateWorkspaceUserParams struct {
	UserID      uuid.UUID `json:"user_id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Role        string    `json:"role"`
}

func (q *Queries) CreateWorkspaceUser(ctx context.Context, arg CreateWorkspaceUserParams) (*WorkspacesUser, error) {
	row := q.db.QueryRow(ctx, createWorkspaceUser, arg.UserID, arg.WorkspaceID, arg.Role)
	var i WorkspacesUser
	err := row.Scan(
		&i.WorkspaceID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
UPDATE workspaces SET deleted_at = now() WHERE id = $1 and user_id = $2
`

type DeleteWorkspaceParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteWorkspace(ctx context.Context, arg DeleteWorkspaceParams) error {
	_, err := q.db.Exec(ctx, deleteWorkspace, arg.ID, arg.UserID)
	return err
}

const getDefaultUserWorkspace = `-- name: GetDefaultUserWorkspace :one
SELECT
  users.id, users.first_name, users.last_name, users.email, users.password, users.verified, users.verification_token, users.avatar, users.created_at, users.updated_at,
  wu.role,
  wu.workspace_id,
  workspaces.name as workspace_name,
  workspaces.currency as workspace_currency,
  workspaces.language as workspace_language
FROM users
JOIN workspaces_users as wu ON users.id = wu.user_id
JOIN workspaces ON wu.workspace_id = workspaces.id
WHERE users.id = $1
LIMIT 1
`

type GetDefaultUserWorkspaceRow struct {
	ID                uuid.UUID        `json:"id"`
	FirstName         string           `json:"first_name"`
	LastName          string           `json:"last_name"`
	Email             string           `json:"email"`
	Password          string           `json:"password"`
	Verified          bool             `json:"verified"`
	VerificationToken *string          `json:"verification_token"`
	Avatar            string           `json:"avatar"`
	CreatedAt         pgtype.Timestamp `json:"created_at"`
	UpdatedAt         pgtype.Timestamp `json:"updated_at"`
	Role              string           `json:"role"`
	WorkspaceID       uuid.UUID        `json:"workspace_id"`
	WorkspaceName     string           `json:"workspace_name"`
	WorkspaceCurrency string           `json:"workspace_currency"`
	WorkspaceLanguage string           `json:"workspace_language"`
}

func (q *Queries) GetDefaultUserWorkspace(ctx context.Context, id uuid.UUID) (*GetDefaultUserWorkspaceRow, error) {
	row := q.db.QueryRow(ctx, getDefaultUserWorkspace, id)
	var i GetDefaultUserWorkspaceRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.VerificationToken,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.WorkspaceID,
		&i.WorkspaceName,
		&i.WorkspaceCurrency,
		&i.WorkspaceLanguage,
	)
	return &i, err
}

const getWorkspacesByUser = `-- name: GetWorkspacesByUser :many
SELECT id, name, description, currency, language, user_id, created_at, updated_at, deleted_at FROM workspaces WHERE user_id = $1 and deleted_at IS NULL LIMIT $2 OFFSET $3
`

type GetWorkspacesByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetWorkspacesByUser(ctx context.Context, arg GetWorkspacesByUserParams) ([]*Workspace, error) {
	rows, err := q.db.Query(ctx, getWorkspacesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Currency,
			&i.Language,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE workspaces SET
  name = coalesce($1, name),
  description = coalesce($2, description),
  currency = coalesce($3, currency),
  language = coalesce($4, language)
WHERE id = $5 and user_id = $6 RETURNING id, name, description, currency, language, user_id, created_at, updated_at, deleted_at
`

type UpdateWorkspaceParams struct {
	Name        *string   `json:"name"`
	Description *string   `json:"description"`
	Currency    *string   `json:"currency"`
	Language    *string   `json:"language"`
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (*Workspace, error) {
	row := q.db.QueryRow(ctx, updateWorkspace,
		arg.Name,
		arg.Description,
		arg.Currency,
		arg.Language,
		arg.ID,
		arg.UserID,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.Language,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
