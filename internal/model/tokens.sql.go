// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tokens.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  token,
  identifier,
  mobile,
  expires_at,
  user_id
) VALUES ($1, $2, $3, $4, $5) RETURNING id, token, identifier, mobile, user_id, expires_at, created_at, updated_at
`

type CreateTokenParams struct {
	Token      string           `json:"token"`
	Identifier *string          `json:"identifier"`
	Mobile     bool             `json:"mobile"`
	ExpiresAt  pgtype.Timestamp `json:"expires_at"`
	UserID     uuid.UUID        `json:"user_id"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (*Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.Token,
		arg.Identifier,
		arg.Mobile,
		arg.ExpiresAt,
		arg.UserID,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Identifier,
		&i.Mobile,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTokenById = `-- name: GetTokenById :one
SELECT id, token, identifier, mobile, user_id, expires_at, created_at, updated_at FROM tokens WHERE id = $1
`

func (q *Queries) GetTokenById(ctx context.Context, id uuid.UUID) (*Token, error) {
	row := q.db.QueryRow(ctx, getTokenById, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Identifier,
		&i.Mobile,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTokensByUser = `-- name: GetTokensByUser :many
SELECT id, token, identifier, mobile, user_id, expires_at, created_at, updated_at FROM tokens WHERE user_id = $1
`

func (q *Queries) GetTokensByUser(ctx context.Context, userID uuid.UUID) ([]*Token, error) {
	rows, err := q.db.Query(ctx, getTokensByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Identifier,
			&i.Mobile,
			&i.UserID,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
