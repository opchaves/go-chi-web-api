// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workspaces.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (
  name,
  description,
  currency,
  language,
  user_id
) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, description, currency, language, user_id, created_at, updated_at
`

type CreateWorkspaceParams struct {
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	Currency    string    `json:"currency"`
	Language    string    `json:"language"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (*Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace,
		arg.Name,
		arg.Description,
		arg.Currency,
		arg.Language,
		arg.UserID,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.Language,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWorkspacesByUser = `-- name: GetWorkspacesByUser :many
SELECT id, name, description, currency, language, user_id, created_at, updated_at FROM workspaces WHERE user_id = $1 LIMIT $2 OFFSET $3
`

type GetWorkspacesByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetWorkspacesByUser(ctx context.Context, arg GetWorkspacesByUserParams) ([]*Workspace, error) {
	rows, err := q.db.Query(ctx, getWorkspacesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Currency,
			&i.Language,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE workspaces SET
  name = coalesce($1, name),
  description = coalesce($2, description),
  currency = coalesce($3, currency),
  language = coalesce($4, language)
WHERE id = $5 and user_id = $6 RETURNING id, name, description, currency, language, user_id, created_at, updated_at
`

type UpdateWorkspaceParams struct {
	Name        *string   `json:"name"`
	Description *string   `json:"description"`
	Currency    *string   `json:"currency"`
	Language    *string   `json:"language"`
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (*Workspace, error) {
	row := q.db.QueryRow(ctx, updateWorkspace,
		arg.Name,
		arg.Description,
		arg.Currency,
		arg.Language,
		arg.ID,
		arg.UserID,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.Language,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
